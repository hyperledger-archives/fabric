// Code generated by protoc-gen-go.
// source: openchain.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	openchain.proto
	server_admin.proto

It has these top-level messages:
	ChainletID
	ChainletMessage
	ChainletSpec
	ChainletDeploymentSpec
	Transaction
	TransactionsMessage
	Block
	OpenchainMessage
	ServerStatus
	ChainletIdentifier
	ChainletRequestContext
	ChainletExecutionContext
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "google/protobuf"

// discarding unused import google_protobuf1 "google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChainletSpec_Type int32

const (
	ChainletSpec_UNDEFINED ChainletSpec_Type = 0
	ChainletSpec_GOLANG    ChainletSpec_Type = 1
	ChainletSpec_NODE      ChainletSpec_Type = 2
)

var ChainletSpec_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "GOLANG",
	2: "NODE",
}
var ChainletSpec_Type_value = map[string]int32{
	"UNDEFINED": 0,
	"GOLANG":    1,
	"NODE":      2,
}

func (x ChainletSpec_Type) String() string {
	return proto.EnumName(ChainletSpec_Type_name, int32(x))
}

type Transaction_Type int32

const (
	Transaction_UNDEFINED          Transaction_Type = 0
	Transaction_CHAINLET_NEW       Transaction_Type = 1
	Transaction_CHAINLET_UPDATE    Transaction_Type = 2
	Transaction_CHAINLET_EXECUTE   Transaction_Type = 3
	Transaction_CHAINLET_TERMINATE Transaction_Type = 4
)

var Transaction_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "CHAINLET_NEW",
	2: "CHAINLET_UPDATE",
	3: "CHAINLET_EXECUTE",
	4: "CHAINLET_TERMINATE",
}
var Transaction_Type_value = map[string]int32{
	"UNDEFINED":          0,
	"CHAINLET_NEW":       1,
	"CHAINLET_UPDATE":    2,
	"CHAINLET_EXECUTE":   3,
	"CHAINLET_TERMINATE": 4,
}

func (x Transaction_Type) String() string {
	return proto.EnumName(Transaction_Type_name, int32(x))
}

type ChainletID struct {
	// Url for accessing the Chainlet, eg. https://github.com/mydomain/SampleContract
	Url     string `protobuf:"bytes,1,opt,name=Url" json:"Url,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=Version" json:"Version,omitempty"`
}

func (m *ChainletID) Reset()         { *m = ChainletID{} }
func (m *ChainletID) String() string { return proto.CompactTextString(m) }
func (*ChainletID) ProtoMessage()    {}

type ChainletMessage struct {
	Function string   `protobuf:"bytes,1,opt,name=function" json:"function,omitempty"`
	Args     []string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *ChainletMessage) Reset()         { *m = ChainletMessage{} }
func (m *ChainletMessage) String() string { return proto.CompactTextString(m) }
func (*ChainletMessage) ProtoMessage()    {}

// Specification of a chaincode.  This is the actual meta-data required for defining a chaincode.
type ChainletSpec struct {
	Type       ChainletSpec_Type `protobuf:"varint,1,opt,name=type,enum=protos.ChainletSpec_Type" json:"type,omitempty"`
	ChainletID *ChainletID       `protobuf:"bytes,2,opt,name=chainletID" json:"chainletID,omitempty"`
	CtorMsg    *ChainletMessage  `protobuf:"bytes,3,opt,name=ctorMsg" json:"ctorMsg,omitempty"`
}

func (m *ChainletSpec) Reset()         { *m = ChainletSpec{} }
func (m *ChainletSpec) String() string { return proto.CompactTextString(m) }
func (*ChainletSpec) ProtoMessage()    {}

func (m *ChainletSpec) GetChainletID() *ChainletID {
	if m != nil {
		return m.ChainletID
	}
	return nil
}

func (m *ChainletSpec) GetCtorMsg() *ChainletMessage {
	if m != nil {
		return m.CtorMsg
	}
	return nil
}

// Used to specify the deployment of a chaincode.
type ChainletDeploymentSpec struct {
	ChainletSpec *ChainletSpec `protobuf:"bytes,1,opt,name=chainletSpec" json:"chainletSpec,omitempty"`
	// Controls when the chaincode becomes executable.
	EffectiveDate *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=effectiveDate" json:"effectiveDate,omitempty"`
	CodePackage   []byte                     `protobuf:"bytes,3,opt,name=codePackage,proto3" json:"codePackage,omitempty"`
}

func (m *ChainletDeploymentSpec) Reset()         { *m = ChainletDeploymentSpec{} }
func (m *ChainletDeploymentSpec) String() string { return proto.CompactTextString(m) }
func (*ChainletDeploymentSpec) ProtoMessage()    {}

func (m *ChainletDeploymentSpec) GetChainletSpec() *ChainletSpec {
	if m != nil {
		return m.ChainletSpec
	}
	return nil
}

func (m *ChainletDeploymentSpec) GetEffectiveDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.EffectiveDate
	}
	return nil
}

// Transaction defines a function call to a contract. Transactions are
// stroed in blocks.
// args is an array of type string so that the chaincode writer can choose whatever
// format they wish for the arguments for their chaincode. For example, they
// may wish to use JSON, XML, or a custom format.
type Transaction struct {
	Type       Transaction_Type `protobuf:"varint,1,opt,name=type,enum=protos.Transaction_Type" json:"type,omitempty"`
	ChainletID *ChainletID      `protobuf:"bytes,2,opt,name=chainletID" json:"chainletID,omitempty"`
	Function   string           `protobuf:"bytes,3,opt,name=function" json:"function,omitempty"`
	Args       []string         `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	Payload    []byte           `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	Uuid       string           `protobuf:"bytes,6,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}

func (m *Transaction) GetChainletID() *ChainletID {
	if m != nil {
		return m.ChainletID
	}
	return nil
}

type TransactionsMessage struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionsMessage) Reset()         { *m = TransactionsMessage{} }
func (m *TransactionsMessage) String() string { return proto.CompactTextString(m) }
func (*TransactionsMessage) ProtoMessage()    {}

func (m *TransactionsMessage) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Block struct {
	ProposerID        string                     `protobuf:"bytes,1,opt,name=proposerID" json:"proposerID,omitempty"`
	Timestamp         *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Transactions      []*Transaction             `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
	StateHash         []byte                     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	PreviousBlockHash []byte                     `protobuf:"bytes,5,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}

func (m *Block) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterEnum("protos.ChainletSpec_Type", ChainletSpec_Type_name, ChainletSpec_Type_value)
	proto.RegisterEnum("protos.Transaction_Type", Transaction_Type_name, Transaction_Type_value)
}
