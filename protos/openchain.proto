/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

package protos;

import "chaincode.proto";
import "google/protobuf/timestamp.proto";

// Transaction defines a function call to a contract.
// `args` is an array of type string so that the chaincode writer can choose
// whatever format they wish for the arguments for their chaincode.
// For example, they may wish to use JSON, XML, or a custom format.
// TODO: Defined remaining fields.
message Transaction {

    enum Type {
        UNDEFINED = 0;
        CHAINLET_NEW = 1;
        CHAINLET_UPDATE = 2;
        CHAINLET_EXECUTE = 3;
        CHAINLET_QUERY = 4;
        CHAINLET_TERMINATE = 5;
    }

    Type type = 1;
    ChaincodeID chaincodeID = 2;
    bytes payload = 3;
    string uuid = 4;
    google.protobuf.Timestamp timestamp = 5;

}

// TransactionBlock carries a batch of transactions.
message TransactionBlock {

    repeated Transaction transactions = 1;

}

// TODO: Explain when this message type is used.
// TODO: Explain fields.
// TODO: Rename field names according to style guide:
// https://developers.google.com/protocol-buffers/docs/style#message-and-field-names
message Block {

    string proposerID = 1;
    google.protobuf.Timestamp Timestamp = 2;
    repeated Transaction transactions = 3;
    bytes stateHash = 4;
    bytes previousBlockHash = 5;

}

// Interface exported by the server.
service Peer {

    // Accepts a stream of OpenchainMessage during chat session, while receiving
    // other OpenchainMessage (e.g. from other peers).
    rpc Chat(stream OpenchainMessage) returns (stream OpenchainMessage) {}

}

message PeerAddress {
    string host = 1;
    int32 port = 2;
}

message PeerID {
    string name = 1;
}

message PeerEndpoint {
    PeerID ID = 1; 
    string address = 2;
}

message PeersMessage {
    repeated PeerEndpoint peers = 1;
}


message OpenchainMessage {

    enum Type {
        UNDEFINED = 0;
        DISC_HELLO = 1;
        DISC_DISCONNECT = 2;
        DISC_GET_PEERS = 3;
        DISC_PEERS = 4;
        DISC_NEWMSG = 5;

        CHAIN_STATUS = 7;
        CHAIN_GET_TRANSACTIONS = 8;
        CHAIN_TRANSACTIONS = 9;
        CHAIN_GET_BLOCKS = 10;
        CHAIN_BLOCKS = 11;
        CHAIN_NEW_BLOCK = 12;
        CHAIN_QUERY = 13;

        REQUEST = 14;
        CONSENSUS = 15;
    }

    Type type = 1;
    google.protobuf.Timestamp timestamp = 2;
    bytes payload = 3;

}
