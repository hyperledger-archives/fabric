/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

package protos;

import "google/protobuf/timestamp.proto";

// Carries the URL where the chaincode resides and the chaincode version.
// TODO: Merge with ChaincodeIDentifier.
message ChaincodeID {

    string url = 1;
    string version = 2;

}

// Carries the chaincode function and its arguments.
message ChaincodeInput {

    string function = 1;
    repeated string args  = 2;

}

// Carries the chaincode function and its arguments.
message ChaincodeInvocationSpec {

    ChaincodeSpec chaincodeSpec = 1;
    //ChaincodeInput message = 2;

}


// Carries the chaincode specification. This is the actual metadata required for
// defining a chaincode.
message ChaincodeSpec {

    enum Type {
        UNDEFINED = 0;
        GOLANG = 1;
        NODE = 2;
    }

    Type type = 1;
    ChaincodeID chaincodeID = 2;
    ChaincodeInput ctorMsg = 3;
    int32 timeout = 4; 
}

// Specify the deployment of a chaincode.
// TODO: Define `codePackage`.
message ChaincodeDeploymentSpec {

    ChaincodeSpec chaincodeSpec = 1;
    // Controls when the chaincode becomes executable.
    google.protobuf.Timestamp effectiveDate = 2;
    bytes codePackage = 3;

}

// TODO: Merge this with ChaincodeID.
message ChaincodeIdentifier {
    // URL for accessing the Chaincode, eg. https://github.com/user/SampleContract
    string Url = 1;
}


// Used by the peer to identify the requesting chaincode and allows for proper
// access to state.
message ChaincodeRequestContext {
    ChaincodeIdentifier Id = 1;
}

// Provided by the peer to the chaincode to identify the requesting chaincode
// and allow for proper access to state.
message ChaincodeExecutionContext {

    ChaincodeIdentifier ChaincodeId = 1;
    google.protobuf.Timestamp Timestamp = 2;

}

message ChaincodeMessage {

    enum Type {
        UNDEFINED = 0;
        REGISTER = 1;
        REGISTERED = 2;
	INIT = 3;
	READY = 4;
	TRANSACTION = 5;
	COMPLETED = 6;
	ERROR = 7;
	GET_STATE = 8;
	PUT_STATE = 9;
	DEL_STATE = 10;
	INVOKE_CHAINCODE = 11;
	RESPONSE = 12;
	QUERY = 13;
	QUERY_COMPLETED = 14;
	QUERY_ERROR = 15;
    }

    Type type = 1;
    google.protobuf.Timestamp timestamp = 2;
    bytes payload = 3;
    string uuid = 4;

}

message PutStateInfo {
    string key = 1;
    bytes value = 2;
}

// Interface that provides support to chaincode execution. ChaincodeContext
// provides the context necessary for the server to respond appropriately.
service ChaincodeSupport {

    // Return the datetime.
    rpc GetExecutionContext(ChaincodeRequestContext) returns (ChaincodeExecutionContext) {}

    rpc Register(stream ChaincodeMessage) returns (stream ChaincodeMessage) {}


}
