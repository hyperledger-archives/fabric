/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

import "fabric.proto";

package protos;

//----Event objects----

message Interest {
    enum ResponseType {
        //don't send events (used to cancel interest)
        DONTSEND = 0;
        //send protobuf objects
        PROTOBUF = 1;
        //marshall into JSON byte array
        JSON = 2;
    }
    string eventType = 1;
    ResponseType responseType = 2;
}
    
    
    
//---------- consumer events ---------
//Register is sent by consumers for registering events
//string type - "register"
message Register {
    repeated Interest events = 1;
}

//---------- producer events ---------
//Generic is used for encoding payload as JSON or raw bytes
//string type - "generic"
message Generic {
    string eventType = 1;
    bytes payload = 2;
}

//Event is used by
//  - consumers (adapters) to send Register
//  - producer to advertise supported types and events 
message Event {
    //TODO need timestamp
    oneof Event {
        //consumer events
        Register register = 1;

        //producer events
        Block block = 2;
        Generic generic = 3;
    }
}

// Interface exported by the events server
service Events {
    // event chatting using Event
    rpc Chat(stream Event) returns (stream Event) {}
}
