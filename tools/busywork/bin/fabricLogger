#!/usr/bin/tclsh

# Copyright IBM Corp. 2016. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# 		 http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set usage {
Usage: fabricLogger ?... parms ...? [... peers ...]

Convert a HyperLedger fabric blockchain into a file that logs all of the
transactions that are found in the blockchain. By default, the entire current
blockchain is converted to a log on standard output and the job
terminates. Each line of the report is a single character followed by a single
piece of information:

b <n>    : Block number <n>
d <ccid> : A chaincode deployment. The <ccid> is the chaincode ID.
i <uuid> : A chaincode invocation. The <uuid> is the transaction UUID.

Note that the block number is printed _after_ all of the block transactions,
to validate to a 'following' client that all transactions of a block have been
seen.

By default, the peer network is defined by the $BUSYWORK_HOME/network file.
However, if one or more peers are provided on the command line, those peers
will be used instead, and the -port option specifies the default REST API port
to use if an explicit peer does not include an explicit port.

To spread the load, if there are multiple peers this script goes to the peers
in round-robin order to try for the next block, even when requests fail in
-follow mode. NOTE: If you are running NOOPS consensus, *do not* specify more
than 1 explict peer, because the blockchains on NOOPS networks are not
guaranteed to be consistent. Note that this issue is handled automatically by
default, as the $BUSYWORK_HOME/network file includes the consensus mode and
only the first peer will be polled in NOOPS networks.

Options:

-h | -help | --help

    Print this usage information and exit normally.

-follow | -noFollow : -noFollow

    By default the job terminates as soon as the last block is processed, that
    is, as soon as a peer does not have the next block. Select -follow to keep
    following forever. In -follow mode the output file is flushed after each
    block is processed.

-followPoll <duration> : 1s

    In -follow mode, once the end of the current blockchain is reached
    fabricLogger will keep polling (alternate peers) at this frequency. If this
    is specified as 0 then fabricLogger will aggressively poll the set of peers
    as fast as possible.

-file <file> : *Standard Output*

    Use -file to specify a log file other than standard output.

-delete | -noDelete : -noDelete

    If logging to a file, the -delete option causes the file to be deleted at
    the exit of the program. This may be useful when other processes are
    following this file.

-retry : 0

    If greater than 0, retry failing HTTP transactions at most this many
    times.

-timestamp | -noTimestamp : -noTimestamp

    This is a debugging flag. If -timestamp is selected then error logging
    from this script will be timestamped.

-force | -noForce : -noForce

    This is a debugging flag. If set, simply log an error if blocks are found
    with invalid JSON, no transactions or other errors and move on. By default
    these types of blocks are considered fatal errors.

-killOnError <pids> : N/A

    If this logger aborts due to an error it sends a SIGINT to every PID in
    this list of PIDS. This flag is used to make drivers terminate more
    quickly if the logger fails..

-port <port> : 5000

    The default REST API port.
}


############################################################################
# Option Processing
############################################################################

lappend auto_path [file dirname [info script]]/../tcl

package require busywork

setLoggingPrefix fabricLogger

set options {
    {enum    {-h -help --help}         parms(help)       0  p_help}
    {bool    {-follow -noFollow}       parms(follow)     0}
    {key     -followPoll               parms(followPoll) 1s}
    {key     -file                     parms(file)       {} fileOption}
    {bool    {-delete -noDelete}       parms(delete)     0}
    {key     -retry                    parms(retry)      0}
    {bool    {-timestamp -noTimestamp} parms(timestamp)  0}
    {bool    {-force -noForce}         parms(force)      0}
    {key     -killOnError              parms(killPIDs)  {}}
    {key     -port                     parms(port)       5000}
}

mapKeywordArgs $argv $options parms(explicitPeers)

if {[parms help]} {
    puts $usage
    exit 0
}

setLoggingTimestamp [parms timestamp]

setLoggingLevel {} note

debug {} "$argv0 $argv"

# Convert followPoll to milliseconds. Validate the number of peers and add the
# default port to explicit peer addresses that don't specify a port. If -file
# was specified, open the log file and set up an exit handler to close and
# delete the file. This includes SIGINT sent by an exiting parent process.
# Create a CircularList of peers.  Initialize the current block index.

parms followPoll [durationToMs [parms followPoll]]

if {[null [parms explicitPeers]]} {
    busywork::networkToArray ::parms network.
    parms peers [parms network.peer.restAddresses]
    if {[parms network.consensus] eq "noops"} {
        parms peers [first [parms peers]]
    }
} else {
    parms peers [addPortToHosts [parms explicitPeers] [parms port]]
}

CircularList create peerList [parms peers]

proc closeAndDeleteFile {} {
    debug {} "Close and delete [parms file]"
    close [parms log]
    exec rm -rf [parms file]
}

parms log stdout
if {$fileOption} {

    if {[catch {parms log [open [parms file] w]}]} {
        errorExit "Error opening log file '[parms file]'"
    }
    if {[parms delete]} {
        atExit {closeAndDeleteFile}
        signal trap SIGINT {exit 0}
    }
}

parms block 0

proc killPIDs {} {
    foreach pid [parms killPIDs] {
        catch {kill SIGINT $pid}
    }
}

atErrorExit {killPIDs}

############################################################################
# Do it
############################################################################

# TODO : Move block access to ::fabric package procedures

set log [parms log]
set follow [parms follow]
set block [parms block]
set lastBlock $block

while {1} {

    for {set retry [parms retry]} {$retry >= 0} {incr retry -1} {

        set peer [peerList next]

        if {[catch {
            http::geturl http://$peer/chain/blocks/$block
        } token]} {
            if {$retry > 0} {
                if {$retry == [parms retry]} {
                    warn warn \
                        "$peer @ block $block : " \
                        "Retrying after catastrophic HTTP error"
            }
            continue
        }
        errorExit \
                "$peer @ block $block : ::http::geturl failed " \
                "with [parms retry] retries\n" \
                $::errorInfo
        }
    
        if {[http::ncode $token] == 404} {

            # End of blockchain
            
            if {![parms follow]} {exit 0}
            if {[parms followPoll] == 0} break
            after [parms followPoll]
            break
        }
        
        if {[http::ncode $token] != 200} {
            
            # Failure
            
            if {$retry > 0} {
                if {$retry == [parms retry]} {
                    warn warn \
                        "$peer @ block $block : " \
                        "Retrying after HTTP error return"
                }
                continue
            }
            
            err err \
                "REST API call to $peer for block $block failed " \
                "with [parms retry] retries"
            err err "HTTP 'ncode' = '[http::ncode $token]'"
            err err "Full HTTP token dump below; Aborting"
            foreach {k v} [array get $token] {err err "    $k $v"}
            exit 1
        }
        
        set parse [json::json2dict [http::data $token]]
        
        if {$block != 0} {
            
            set force 0
            if {[catch {dict get $parse transactions} transactions]} {
                
                if {[parms force]} {

                    err {} \
                        "Block $block JSON response does not parse; " \
                        "Continuing (-force mode)."
                    set force 1

                } else {

                    err {} "Block $block JSON response does not parse"
                    err {} "HTTP 'ncode' = '[http::ncode $token]'"
                    err {} "Full HTTP token dump below; Aborting"
                    foreach {k v} [array get $token] {
                        err {} "    $k $v"
                    }
                    exit 1
                }
            }

            if {!$force} {

                if {[null $transactions]} {

                    err {} "Block $block contains no transactions"
                    err {} "HTTP 'ncode' = '[http::ncode $token]'"
                    err {} "Full HTTP token dump below; Aborting"
                    foreach {k v} [array get $token] {
                        err {} "    $k $v"
                    }
                    exit 1
                }

                foreach tx $transactions {
                
                    # The chaincodeID comes back as bytes so that it can be
                    # encrypted. We don't log it or the timestamp now. The
                    # "UUID" for type 1 (deploy) transactions is actually the
                    # chaincode name.
                    
                    if {[catch {
                        set type [dict get $tx type]
                        set uuid [dict get $tx uuid]}]} {
                        
                        if {[parms force]} {

                            err {} \
                                "Block $block contains a malformed " \
                                "transaction; Continuing (-force mode)"

                        } else {

                            errorExit \
                                "Error: Block $block contains a malformed " \
                                "transaction!\n" \
                                "Transaction JSON keys : [dict keys $tx]"
                        }

                    } else {
                    
                        switch $type {
                            1 {
                                puts $log "d $uuid"
                            }
                            2 {
                                puts $log "i $uuid"
                            }
                            default {
                                if {[parms force]} {

                                    err {} \
                                        "Block $block has a transaction " \
                                        "with an illegal type $d; " \
                                        "Continuing (-force mode)"

                                } else {
                                    
                                    errorExit \
                                        "Block $block has a transaction with " \
                                        "an illegal type $d"
                                }
                            }
                        }
                    }
                }
            }
        }
        
        http::cleanup $token
        puts $log "b $block"
        
        if {$follow} {flush $log}
        
        set lastBlock $block
        incr block
        
        break
    }
    
    if {$retry != [parms retry]} {
        note note \
            "$peer @ block $lastBlock : " \
            "Success after [expr {[parms retry] - $retry}] HTTP retries"
    }
}
