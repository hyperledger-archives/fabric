/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package obcpbft;

/*
 * mapping to PBFT paper names
 *
 * PBFT name: local name
 *
 * o: transaction
 * t: timestamp
 * c: client
 * v: view
 * n: sequenceNumber
 * D(m): requestDigest
 * i: replicaId
 */

message message {
    oneof payload {
        request request = 1;
        pre_prepare pre_prepare = 2;
        prepare prepare = 3;
        commit commit = 4;
        checkpoint checkpoint = 5;
        view_change view_change = 6;
        new_view new_view = 7;
        fetch_request fetch_request = 8;
        request return_request = 9;
    }
}

message request {
    google.protobuf.Timestamp timestamp = 1;  // Generated at the client level. Ensures that client's requests are atomically ordered.
    bytes payload = 2;  // opaque payload
    uint64 replica_id = 3;
}

message pre_prepare {
    uint64 view = 1;
    uint64 sequence_number = 2;
    string request_digest = 3;
    request request = 4;
    uint64 replica_id = 5;
}

message prepare {
    uint64 view = 1;
    uint64 sequence_number = 2;
    string request_digest = 3;
    uint64 replica_id = 4;
}

message commit {
    uint64 view = 1;
    uint64 sequence_number = 2;
    string request_digest = 3;
    uint64 replica_id = 4;
}

message block_info {
    uint64 block_number = 1;
    bytes block_hash = 2;
}

message sieve_id {
    uint64 block_number = 1;
    bytes obc_id = 2;
}

message checkpoint {
    uint64 sequence_number = 1;
    uint64 replica_id = 2;
    string id = 3;
}

message view_change {
    /* This message should go away and become a checkpoint once replica_id is removed */
    message C {
        uint64 sequence_number = 1;
        string id = 3;
    }
    message PQ {
        uint64 sequence_number = 1;
        string digest = 2;
        uint64 view = 3;
    }

    uint64 view = 1;
    uint64 h = 2;
    repeated C cset = 3;
    repeated PQ pset = 4;
    repeated PQ qset = 5;
    uint64 replica_id = 6;
    bytes signature = 7;
}

message new_view {
    uint64 view = 1;
    repeated view_change vset = 2;
    map<uint64, string> xset = 3;
    uint64 replica_id = 4;
}

message fetch_request {
    string request_digest = 1;
    uint64 replica_id = 2;
}

// batch

message batch_message {
    oneof payload {
        bytes request = 1;
        bytes pbft_message = 4;
    }
}

// sieve

message sieve_message {
    oneof payload {
        bytes request = 1;
        execute execute = 2;
        verify verify = 3;
        bytes pbft_message = 4;
    }
}

message execute {
    uint64 view = 1;
    uint64 block_number = 2;
    bytes request = 3;
    uint64 replica_id = 4;
}

message verify {
    uint64 view = 1;
    uint64 block_number = 2;
    string request_digest = 3;
    bytes result_digest = 4;
    uint64 replica_id = 5;
    bytes signature = 6;
}

message sieve_pbft_message {
    oneof payload {
        verify_set verify_set = 1;
        flush flush = 2;
    }
}

message verify_set {
    uint64 view = 1;
    uint64 block_number = 2;
    string request_digest = 3;
    repeated verify dset = 4;
    uint64 replica_id = 5;
    bytes signature = 6;
}

message flush {
    uint64 view = 1;
    uint64 replica_id = 2;
    bytes signature = 3;
}

// consensus metadata

message metadata {
    uint64 seqNo = 1;
}
