import request = require('request');
import promise = require('bluebird');
import http = require('http');

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class BlockchainInfo {
    /**
    * Current height of the blockchain.
    */
    height: number;
    /**
    * Hash of the last block in the blockchain.
    */
    currentBlockHash: string;
    /**
    * Hash of the previous block in the blockchain.
    */
    previousBlockHash: string;
}

export class Block {
    /**
    * Creator/originator of the block.
    */
    proposerID: string;
    /**
    * Time of block creation.
    */
    timestamp: string;
    transactions: Array<Transaction>;
    /**
    * Global state hash after executing all transactions in the block.
    */
    stateHash: string;
    /**
    * Hash of the previous block in the blockchain.
    */
    previousBlockHash: string;
}

export class Transaction {
    /**
    * Transaction type.
    */
    type: Transaction.TypeEnum;
    /**
    * Unique Chaincode identifier.
    */
    chaincodeID: ChaincodeID;
    /**
    * Function to execute within a Chaincode.
    */
    function: string;
    /**
    * Arguments supplied to the Chaincode function.
    */
    args: Array<string>;
    /**
    * Payload supplied for Chaincode function execution.
    */
    payload: string;
    /**
    * Unique transaction identifier.
    */
    uuid: string;
}

export namespace Transaction {
    export enum TypeEnum { 
        UNDEFINED = <any> 'UNDEFINED',
        CHAINLET_NEW = <any> 'CHAINLET_NEW',
        CHAINLET_UPDATE = <any> 'CHAINLET_UPDATE',
        CHAINLET_EXECUTE = <any> 'CHAINLET_EXECUTE',
        CHAINLET_TERMINATE = <any> 'CHAINLET_TERMINATE',
    }
}
export class ChaincodeID {
    /**
    * URL for accessing the Chaincode.
    */
    url: string;
    /**
    * Current version of a Chaincode.
    */
    version: string;
}

export class State {
    /**
    * State value matching the chaincodeId and key parameters.
    */
    state: string;
}

export class ChaincodeSpec {
    /**
    * Chaincode specification language.
    */
    type: ChaincodeSpec.TypeEnum;
    /**
    * Unique Chaincode identifier.
    */
    chaincodeID: ChaincodeID;
    /**
    * Specific function to execute within the Chaincode.
    */
    ctorMsg: ChaincodeMessage;
}

export namespace ChaincodeSpec {
    export enum TypeEnum { 
        UNDEFINED = <any> 'UNDEFINED',
        GOLANG = <any> 'GOLANG',
        NODE = <any> 'NODE',
    }
}
export class ChaincodeDeploymentSpec {
    /**
    * Chaincode specification message.
    */
    chaincodeSpec: ChaincodeSpec;
    /**
    * Time of Chaincode creation/activation.
    */
    effectiveDate: string;
    /**
    * Compiled Chaincode package.
    */
    codePackage: string;
}

export class ChaincodeMessage {
    /**
    * Function to execute within a Chaincode.
    */
    function: string;
    /**
    * Arguments supplied to the Chaincode function.
    */
    args: Array<string>;
}

export class Error {
    /**
    * A descriptive message explaining the cause of error.
    */
    error: string;
}


interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

class OAuth implements Authentication {
    applyToRequest(requestOptions: request.Options): void {
        // TODO: support oauth
    }
}

class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        // Do nothing
    }
}

export class StateApi {
    protected basePath = 'http://127.0.0.1:3000';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    public getChaincodeState (chaincodeID: string, key: string) : Promise<{ response: http.ClientResponse; body: State;  }> {
        const path = this.url + this.basePath + '/state/{chaincodeID}/{key}'
            .replace('{' + 'chaincodeID' + '}', String(chaincodeID))
            .replace('{' + 'key' + '}', String(key));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'chaincodeID' is set
        if (!chaincodeID) {
            throw new Error('Missing required parameter chaincodeID when calling getChaincodeState');
        }

        // verify required parameter 'key' is set
        if (!key) {
            throw new Error('Missing required parameter key when calling getChaincodeState');
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: State;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class BlockchainApi {
    protected basePath = 'http://127.0.0.1:3000';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    public getChain () : Promise<{ response: http.ClientResponse; body: BlockchainInfo;  }> {
        const path = this.url + this.basePath + '/chain';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: BlockchainInfo;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class BlockApi {
    protected basePath = 'http://127.0.0.1:3000';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    public getBlock (block: number) : Promise<{ response: http.ClientResponse; body: Block;  }> {
        const path = this.url + this.basePath + '/chain/blocks/{Block}'
            .replace('{' + 'Block' + '}', String(block));
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'block' is set
        if (!block) {
            throw new Error('Missing required parameter block when calling getBlock');
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: Block;  }>();

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
export class DevopsApi {
    protected basePath = 'http://127.0.0.1:3000';
    protected defaultHeaders : any = {};



    public authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(url: string, basePath?: string);
    constructor(private url: string, basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }

    public chaincodeBuild (chaincodeSpec: ChaincodeSpec) : Promise<{ response: http.ClientResponse; body: ChaincodeDeploymentSpec;  }> {
        const path = this.url + this.basePath + '/devops/build';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'chaincodeSpec' is set
        if (!chaincodeSpec) {
            throw new Error('Missing required parameter chaincodeSpec when calling chaincodeBuild');
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: ChaincodeDeploymentSpec;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: chaincodeSpec,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }

    public chaincodeDeploy (chaincodeSpec: ChaincodeSpec) : Promise<{ response: http.ClientResponse; body: ChaincodeDeploymentSpec;  }> {
        const path = this.url + this.basePath + '/devops/deploy';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'chaincodeSpec' is set
        if (!chaincodeSpec) {
            throw new Error('Missing required parameter chaincodeSpec when calling chaincodeDeploy');
        }

        let useFormData = false;

        let deferred = promise.defer<{ response: http.ClientResponse; body: ChaincodeDeploymentSpec;  }>();

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: path,
            json: true,
            body: chaincodeSpec,
        }

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }

        request(requestOptions, (error, response, body) => {
            if (error) {
                deferred.reject(error);
            } else {
                if (response.statusCode >= 200 && response.statusCode <= 299) {
                    deferred.resolve({ response: response, body: body });
                } else {
                    deferred.reject({ response: response, body: body });
                }
            }
        });

        return deferred.promise;
    }
}
